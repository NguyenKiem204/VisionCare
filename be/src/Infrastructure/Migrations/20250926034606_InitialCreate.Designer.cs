// <auto-generated />
using System;
using System.Net;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VisionCare.Infrastructure.Data;

#nullable disable

namespace VisionCare.Infrastructure.Migrations
{
    [DbContext(typeof(VisionCareDbContext))]
    [Migration("20250926034606_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountId"));

                    b.Property<short?>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("access_failed_count");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("EmailConfirmationToken")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email_confirmation_token");

                    b.Property<bool?>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FacebookId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("facebook_id");

                    b.Property<string>("GoogleId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("google_id");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_login");

                    b.Property<DateTime?>("LastPasswordChange")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_password_change");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<DateTime?>("PasswordResetExpires")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("password_reset_expires");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_reset_token");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Active'::character varying");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.HasKey("AccountId")
                        .HasName("accounts_pkey");

                    b.HasIndex(new[] { "Email" }, "accounts_email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "FacebookId" }, "accounts_facebook_id_key")
                        .IsUnique();

                    b.HasIndex(new[] { "GoogleId" }, "accounts_google_id_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "accounts_username_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "idx_accounts_email");

                    b.HasIndex(new[] { "FacebookId" }, "idx_accounts_facebook_id")
                        .HasFilter("(facebook_id IS NOT NULL)");

                    b.HasIndex(new[] { "GoogleId" }, "idx_accounts_google_id")
                        .HasFilter("(google_id IS NOT NULL)");

                    b.HasIndex(new[] { "RoleId" }, "idx_accounts_role");

                    b.HasIndex(new[] { "Status" }, "idx_accounts_status");

                    b.HasIndex(new[] { "Username" }, "idx_accounts_username");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("appointment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AppointmentId"));

                    b.Property<decimal?>("ActualCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("actual_cost");

                    b.Property<DateTime>("AppointmentDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("appointment_datetime");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("integer")
                        .HasColumnName("discount_id");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer")
                        .HasColumnName("doctor_id");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.Property<int>("ServiceDetailId")
                        .HasColumnType("integer")
                        .HasColumnName("service_detail_id");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Scheduled'::character varying");

                    b.HasKey("AppointmentId")
                        .HasName("appointment_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DiscountId");

                    b.HasIndex("ServiceDetailId");

                    b.HasIndex(new[] { "AppointmentDatetime" }, "idx_appointments_datetime");

                    b.HasIndex(new[] { "DoctorId" }, "idx_appointments_doctor");

                    b.HasIndex(new[] { "PatientId" }, "idx_appointments_patient");

                    b.HasIndex(new[] { "Status" }, "idx_appointments_status");

                    b.ToTable("appointment", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Auditlog", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("audit_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AuditId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("action");

                    b.Property<string>("Details")
                        .HasColumnType("jsonb")
                        .HasColumnName("details");

                    b.Property<IPAddress>("IpAddress")
                        .HasColumnType("inet")
                        .HasColumnName("ip_address");

                    b.Property<string>("Resource")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("resource");

                    b.Property<int?>("ResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("resource_id");

                    b.Property<bool>("Success")
                        .HasColumnType("boolean")
                        .HasColumnName("success");

                    b.Property<DateTime?>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("AuditId")
                        .HasName("auditlogs_pkey");

                    b.HasIndex(new[] { "AccountId" }, "idx_audit_account");

                    b.HasIndex(new[] { "Resource", "ResourceId" }, "idx_audit_resource");

                    b.HasIndex(new[] { "Timestamp" }, "idx_audit_timestamp");

                    b.ToTable("auditlogs", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Banner", b =>
                {
                    b.Property<int>("BannerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("banner_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BannerId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("display_order");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_url");

                    b.Property<string>("LinkUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("link_url");

                    b.Property<DateOnly?>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("start_date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Active'::character varying");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasKey("BannerId")
                        .HasName("banner_pkey");

                    b.HasIndex(new[] { "DisplayOrder", "Status" }, "banner_display_order_status_key")
                        .IsUnique();

                    b.ToTable("banner", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("blog_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BlogId"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Excerpt")
                        .HasColumnType("text")
                        .HasColumnName("excerpt");

                    b.Property<string>("FeaturedImage")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("featured_image");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("published_at");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Draft'::character varying");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("view_count");

                    b.HasKey("BlogId")
                        .HasName("blog_pkey");

                    b.HasIndex(new[] { "AuthorId" }, "idx_blog_author");

                    b.HasIndex(new[] { "Status", "PublishedAt" }, "idx_blog_status_published");

                    b.ToTable("blog", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Certificate", b =>
                {
                    b.Property<int>("CertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("certificate_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CertificateId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("CertificateId")
                        .HasName("certificate_pkey");

                    b.ToTable("certificate", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Certificatedoctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("integer")
                        .HasColumnName("doctor_id");

                    b.Property<int>("CertificateId")
                        .HasColumnType("integer")
                        .HasColumnName("certificate_id");

                    b.Property<string>("CertificateImage")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("certificate_image");

                    b.Property<DateOnly?>("ExpiryDate")
                        .HasColumnType("date")
                        .HasColumnName("expiry_date");

                    b.Property<string>("IssuedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("issued_by");

                    b.Property<DateOnly?>("IssuedDate")
                        .HasColumnType("date")
                        .HasColumnName("issued_date");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Active'::character varying");

                    b.HasKey("DoctorId", "CertificateId")
                        .HasName("certificatedoctor_pkey");

                    b.HasIndex("CertificateId");

                    b.ToTable("certificatedoctor", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Checkout", b =>
                {
                    b.Property<int>("CheckoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("checkout_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CheckoutId"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer")
                        .HasColumnName("appointment_id");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime?>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("payment_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("total_amount");

                    b.Property<string>("TransactionCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("transaction_code");

                    b.Property<string>("TransactionStatus")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("transaction_status");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("transaction_type");

                    b.HasKey("CheckoutId")
                        .HasName("checkout_pkey");

                    b.HasIndex(new[] { "AppointmentId" }, "idx_checkout_appointment");

                    b.HasIndex(new[] { "TransactionStatus" }, "idx_checkout_status");

                    b.ToTable("checkout", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Claim", b =>
                {
                    b.Property<int>("ClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("claim_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClaimId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("claim_value");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expires_at");

                    b.HasKey("ClaimId")
                        .HasName("claims_pkey");

                    b.HasIndex(new[] { "AccountId", "ClaimType", "ClaimValue" }, "claims_account_id_claim_type_claim_value_key")
                        .IsUnique();

                    b.HasIndex(new[] { "AccountId", "ClaimType" }, "idx_claims_account_type");

                    b.ToTable("claims", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Commentblog", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("comment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommentId"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<int>("BlogId")
                        .HasColumnType("integer")
                        .HasColumnName("blog_id");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment_text");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_comment_id");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Active'::character varying");

                    b.HasKey("CommentId")
                        .HasName("commentblog_pkey");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex(new[] { "BlogId" }, "idx_comment_blog");

                    b.ToTable("commentblog", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Contentstory", b =>
                {
                    b.Property<int>("StoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("story_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StoryId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("display_order");

                    b.Property<string>("PatientImage")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("patient_image");

                    b.Property<string>("PatientName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("patient_name");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Active'::character varying");

                    b.Property<string>("StoryContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("story_content");

                    b.HasKey("StoryId")
                        .HasName("contentstories_pkey");

                    b.ToTable("contentstories", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Customer", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("avatar");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("gender");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<int?>("RankId")
                        .HasColumnType("integer")
                        .HasColumnName("rank_id");

                    b.HasKey("AccountId")
                        .HasName("customers_pkey");

                    b.HasIndex("RankId");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Customerrank", b =>
                {
                    b.Property<int>("RankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rank_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RankId"));

                    b.Property<decimal>("MinAmount")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("min_amount");

                    b.Property<string>("RankName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("rank_name");

                    b.HasKey("RankId")
                        .HasName("customerrank_pkey");

                    b.ToTable("customerrank", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Degree", b =>
                {
                    b.Property<int>("DegreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("degree_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DegreeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("DegreeId")
                        .HasName("degree_pkey");

                    b.ToTable("degree", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Degreedoctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("integer")
                        .HasColumnName("doctor_id");

                    b.Property<int>("DegreeId")
                        .HasColumnType("integer")
                        .HasColumnName("degree_id");

                    b.Property<string>("CertificateImage")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("certificate_image");

                    b.Property<string>("IssuedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("issued_by");

                    b.Property<DateOnly?>("IssuedDate")
                        .HasColumnType("date")
                        .HasColumnName("issued_date");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Active'::character varying");

                    b.HasKey("DoctorId", "DegreeId")
                        .HasName("degreedoctor_pkey");

                    b.HasIndex("DegreeId");

                    b.ToTable("degreedoctor", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("discount_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DiscountId"));

                    b.Property<string>("DiscountName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("discount_name");

                    b.Property<decimal>("DiscountPercent")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("discount_percent");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<int?>("RankId")
                        .HasColumnType("integer")
                        .HasColumnName("rank_id");

                    b.Property<DateOnly?>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("start_date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Active'::character varying");

                    b.HasKey("DiscountId")
                        .HasName("discount_pkey");

                    b.HasIndex("RankId");

                    b.ToTable("discount", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Doctor", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("avatar");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<short?>("ExperienceYears")
                        .HasColumnType("smallint")
                        .HasColumnName("experience_years");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("gender");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<decimal?>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(2, 1)
                        .HasColumnType("numeric(2,1)")
                        .HasColumnName("rating")
                        .HasDefaultValueSql("0.0");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer")
                        .HasColumnName("specialization_id");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Active'::character varying");

                    b.HasKey("AccountId")
                        .HasName("doctors_pkey");

                    b.HasIndex(new[] { "SpecializationId" }, "idx_doctors_specialization");

                    b.ToTable("doctors", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Feedbackdoctor", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("feedback_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FeedbackId"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer")
                        .HasColumnName("appointment_id");

                    b.Property<DateTime?>("FeedbackDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("feedback_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("FeedbackText")
                        .HasColumnType("text")
                        .HasColumnName("feedback_text");

                    b.Property<short?>("Rating")
                        .HasColumnType("smallint")
                        .HasColumnName("rating");

                    b.Property<int?>("RespondedBy")
                        .HasColumnType("integer")
                        .HasColumnName("responded_by");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("response_date");

                    b.Property<string>("ResponseText")
                        .HasColumnType("text")
                        .HasColumnName("response_text");

                    b.HasKey("FeedbackId")
                        .HasName("feedbackdoctor_pkey");

                    b.HasIndex("RespondedBy");

                    b.HasIndex(new[] { "AppointmentId" }, "idx_feedback_doctor_appointment");

                    b.ToTable("feedbackdoctor", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Feedbackservice", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("feedback_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FeedbackId"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer")
                        .HasColumnName("appointment_id");

                    b.Property<DateTime?>("FeedbackDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("feedback_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("FeedbackText")
                        .HasColumnType("text")
                        .HasColumnName("feedback_text");

                    b.Property<short?>("Rating")
                        .HasColumnType("smallint")
                        .HasColumnName("rating");

                    b.Property<int?>("RespondedBy")
                        .HasColumnType("integer")
                        .HasColumnName("responded_by");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("response_date");

                    b.Property<string>("ResponseText")
                        .HasColumnType("text")
                        .HasColumnName("response_text");

                    b.HasKey("FeedbackId")
                        .HasName("feedbackservice_pkey");

                    b.HasIndex("RespondedBy");

                    b.HasIndex(new[] { "AppointmentId" }, "idx_feedback_service_appointment");

                    b.ToTable("feedbackservice", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Followup", b =>
                {
                    b.Property<int>("FollowUpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("follow_up_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FollowUpId"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer")
                        .HasColumnName("appointment_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("NextAppointmentDate")
                        .HasColumnType("date")
                        .HasColumnName("next_appointment_date");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Pending'::character varying");

                    b.HasKey("FollowUpId")
                        .HasName("followup_pkey");

                    b.HasIndex("AppointmentId");

                    b.ToTable("followup", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Imagesservice", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_id");

                    b.Property<string>("ImageAfter")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_after");

                    b.Property<string>("ImageBefore")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_before");

                    b.Property<string>("ImageMain")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_main");

                    b.HasKey("ServiceId")
                        .HasName("imagesservice_pkey");

                    b.ToTable("imagesservice", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Machine", b =>
                {
                    b.Property<int>("MachineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("machine_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MachineId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Specifications")
                        .HasColumnType("text")
                        .HasColumnName("specifications");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Active'::character varying");

                    b.HasKey("MachineId")
                        .HasName("machine_pkey");

                    b.ToTable("machine", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Medicalhistory", b =>
                {
                    b.Property<int>("MedicalHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("medical_history_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MedicalHistoryId"));

                    b.Property<string>("AdditionalTests")
                        .HasColumnType("text")
                        .HasColumnName("additional_tests");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer")
                        .HasColumnName("appointment_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("text")
                        .HasColumnName("diagnosis");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("Prescription")
                        .HasColumnType("text")
                        .HasColumnName("prescription");

                    b.Property<string>("Symptoms")
                        .HasColumnType("text")
                        .HasColumnName("symptoms");

                    b.Property<string>("Treatment")
                        .HasColumnType("text")
                        .HasColumnName("treatment");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal?>("VisionLeft")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("vision_left");

                    b.Property<decimal?>("VisionRight")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("vision_right");

                    b.HasKey("MedicalHistoryId")
                        .HasName("medicalhistory_pkey");

                    b.HasIndex(new[] { "AppointmentId" }, "idx_medical_history_appointment");

                    b.ToTable("medicalhistory", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Otpservice", b =>
                {
                    b.Property<int>("OtpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("otp_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OtpId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<short?>("Attempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("attempts");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("OtpHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("otp_hash");

                    b.Property<string>("OtpType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("otp_type");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("used_at");

                    b.HasKey("OtpId")
                        .HasName("otpservices_pkey");

                    b.HasIndex(new[] { "AccountId", "OtpType" }, "idx_otp_account_type")
                        .HasFilter("(used_at IS NULL)");

                    b.ToTable("otpservices", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PermissionId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("action");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("permission_name");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("resource");

                    b.HasKey("PermissionId")
                        .HasName("permission_pkey");

                    b.HasIndex(new[] { "PermissionName" }, "permission_permission_name_key")
                        .IsUnique();

                    b.ToTable("permission", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Permissionrole", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("GrantedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("granted_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("PermissionId", "RoleId")
                        .HasName("permissionrole_pkey");

                    b.HasIndex("RoleId");

                    b.ToTable("permissionrole", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Refreshtoken", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("token_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TokenId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<IPAddress>("CreatedByIp")
                        .HasColumnType("inet")
                        .HasColumnName("created_by_ip");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expires_at");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("revoked_at");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("token_hash");

                    b.HasKey("TokenId")
                        .HasName("refreshtokens_pkey");

                    b.HasIndex(new[] { "AccountId" }, "idx_refresh_tokens_account");

                    b.HasIndex(new[] { "ExpiresAt" }, "idx_refresh_tokens_expires")
                        .HasFilter("(revoked_at IS NULL)");

                    b.HasIndex(new[] { "TokenHash" }, "refreshtokens_token_hash_key")
                        .IsUnique();

                    b.ToTable("refreshtokens", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("RoleDescription")
                        .HasColumnType("text")
                        .HasColumnName("role_description");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId")
                        .HasName("role_pkey");

                    b.HasIndex(new[] { "RoleName" }, "role_role_name_key")
                        .IsUnique();

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("schedule_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ScheduleId"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer")
                        .HasColumnName("doctor_id");

                    b.Property<DateOnly>("ScheduleDate")
                        .HasColumnType("date")
                        .HasColumnName("schedule_date");

                    b.Property<int>("SlotId")
                        .HasColumnType("integer")
                        .HasColumnName("slot_id");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Available'::character varying");

                    b.HasKey("ScheduleId")
                        .HasName("schedules_pkey");

                    b.HasIndex("SlotId");

                    b.HasIndex(new[] { "DoctorId", "ScheduleDate" }, "idx_schedules_doctor_date");

                    b.HasIndex(new[] { "DoctorId", "SlotId", "ScheduleDate" }, "schedules_doctor_id_slot_id_schedule_date_key")
                        .IsUnique();

                    b.ToTable("schedules", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("service_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ServiceId"));

                    b.Property<string>("Benefits")
                        .HasColumnType("text")
                        .HasColumnName("benefits");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int?>("SpecializationId")
                        .HasColumnType("integer")
                        .HasColumnName("specialization_id");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Active'::character varying");

                    b.HasKey("ServiceId")
                        .HasName("services_pkey");

                    b.HasIndex("SpecializationId");

                    b.ToTable("services", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Servicesdetail", b =>
                {
                    b.Property<int>("ServiceDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("service_detail_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ServiceDetailId"));

                    b.Property<decimal>("Cost")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("cost");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_id");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("service_type_id");

                    b.HasKey("ServiceDetailId")
                        .HasName("servicesdetail_pkey");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("servicesdetail", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Servicestype", b =>
                {
                    b.Property<int>("ServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("service_type_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ServiceTypeId"));

                    b.Property<short>("DurationMinutes")
                        .HasColumnType("smallint")
                        .HasColumnName("duration_minutes");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("ServiceTypeId")
                        .HasName("servicestype_pkey");

                    b.ToTable("servicestype", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Slot", b =>
                {
                    b.Property<int>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("slot_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SlotId"));

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end_time");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("service_type_id");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start_time");

                    b.HasKey("SlotId")
                        .HasName("slots_pkey");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex(new[] { "StartTime", "ServiceTypeId" }, "slots_start_time_service_type_id_key")
                        .IsUnique();

                    b.ToTable("slots", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Specialization", b =>
                {
                    b.Property<int>("SpecializationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("specialization_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SpecializationId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Active'::character varying");

                    b.HasKey("SpecializationId")
                        .HasName("specialization_pkey");

                    b.ToTable("specialization", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Staff", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("avatar");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("gender");

                    b.Property<DateOnly?>("HiredDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("hired_date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<decimal?>("Salary")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("salary");

                    b.HasKey("AccountId")
                        .HasName("staff_pkey");

                    b.ToTable("staff", (string)null);
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Account", b =>
                {
                    b.HasOne("VisionCare.Infrastructure.Models.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("accounts_role_id_fkey");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Appointment", b =>
                {
                    b.HasOne("VisionCare.Infrastructure.Models.Account", "CreatedByNavigation")
                        .WithMany("Appointments")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("appointment_created_by_fkey");

                    b.HasOne("VisionCare.Infrastructure.Models.Discount", "Discount")
                        .WithMany("Appointments")
                        .HasForeignKey("DiscountId")
                        .HasConstraintName("appointment_discount_id_fkey");

                    b.HasOne("VisionCare.Infrastructure.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("appointment_doctor_id_fkey");

                    b.HasOne("VisionCare.Infrastructure.Models.Customer", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("appointment_patient_id_fkey");

                    b.HasOne("VisionCare.Infrastructure.Models.Servicesdetail", "ServiceDetail")
                        .WithMany("Appointments")
                        .HasForeignKey("ServiceDetailId")
                        .IsRequired()
                        .HasConstraintName("appointment_service_detail_id_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Discount");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("ServiceDetail");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Auditlog", b =>
                {
                    b.HasOne("VisionCare.Infrastructure.Models.Account", "Account")
                        .WithMany("Auditlogs")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("auditlogs_account_id_fkey");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Blog", b =>
                {
                    b.HasOne("VisionCare.Infrastructure.Models.Account", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("blog_author_id_fkey");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Certificatedoctor", b =>
                {
                    b.HasOne("VisionCare.Infrastructure.Models.Certificate", "Certificate")
                        .WithMany("Certificatedoctors")
                        .HasForeignKey("CertificateId")
                        .IsRequired()
                        .HasConstraintName("certificatedoctor_certificate_id_fkey");

                    b.HasOne("VisionCare.Infrastructure.Models.Doctor", "Doctor")
                        .WithMany("Certificatedoctors")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("certificatedoctor_doctor_id_fkey");

                    b.Navigation("Certificate");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Checkout", b =>
                {
                    b.HasOne("VisionCare.Infrastructure.Models.Appointment", "Appointment")
                        .WithMany("Checkouts")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("checkout_appointment_id_fkey");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Claim", b =>
                {
                    b.HasOne("VisionCare.Infrastructure.Models.Account", "Account")
                        .WithMany("Claims")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("claims_account_id_fkey");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Commentblog", b =>
                {
                    b.HasOne("VisionCare.Infrastructure.Models.Account", "Author")
                        .WithMany("Commentblogs")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("commentblog_author_id_fkey");

                    b.HasOne("VisionCare.Infrastructure.Models.Blog", "Blog")
                        .WithMany("Commentblogs")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("commentblog_blog_id_fkey");

                    b.HasOne("VisionCare.Infrastructure.Models.Commentblog", "ParentComment")
                        .WithMany("InverseParentComment")
                        .HasForeignKey("ParentCommentId")
                        .HasConstraintName("commentblog_parent_comment_id_fkey");

                    b.Navigation("Author");

                    b.Navigation("Blog");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Customer", b =>
                {
                    b.HasOne("VisionCare.Infrastructure.Models.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("VisionCare.Infrastructure.Models.Customer", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("customers_account_id_fkey");

                    b.HasOne("VisionCare.Infrastructure.Models.Customerrank", "Rank")
                        .WithMany("Customers")
                        .HasForeignKey("RankId")
                        .HasConstraintName("customers_rank_id_fkey");

                    b.Navigation("Account");

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Degreedoctor", b =>
                {
                    b.HasOne("VisionCare.Infrastructure.Models.Degree", "Degree")
                        .WithMany("Degreedoctors")
                        .HasForeignKey("DegreeId")
                        .IsRequired()
                        .HasConstraintName("degreedoctor_degree_id_fkey");

                    b.HasOne("VisionCare.Infrastructure.Models.Doctor", "Doctor")
                        .WithMany("Degreedoctors")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("degreedoctor_doctor_id_fkey");

                    b.Navigation("Degree");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Discount", b =>
                {
                    b.HasOne("VisionCare.Infrastructure.Models.Customerrank", "Rank")
                        .WithMany("Discounts")
                        .HasForeignKey("RankId")
                        .HasConstraintName("discount_rank_id_fkey");

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Doctor", b =>
                {
                    b.HasOne("VisionCare.Infrastructure.Models.Account", "Account")
                        .WithOne("Doctor")
                        .HasForeignKey("VisionCare.Infrastructure.Models.Doctor", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("doctors_account_id_fkey");

                    b.HasOne("VisionCare.Infrastructure.Models.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .IsRequired()
                        .HasConstraintName("doctors_specialization_id_fkey");

                    b.Navigation("Account");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Feedbackdoctor", b =>
                {
                    b.HasOne("VisionCare.Infrastructure.Models.Appointment", "Appointment")
                        .WithMany("Feedbackdoctors")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("feedbackdoctor_appointment_id_fkey");

                    b.HasOne("VisionCare.Infrastructure.Models.Staff", "RespondedByNavigation")
                        .WithMany("Feedbackdoctors")
                        .HasForeignKey("RespondedBy")
                        .HasConstraintName("feedbackdoctor_responded_by_fkey");

                    b.Navigation("Appointment");

                    b.Navigation("RespondedByNavigation");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Feedbackservice", b =>
                {
                    b.HasOne("VisionCare.Infrastructure.Models.Appointment", "Appointment")
                        .WithMany("Feedbackservices")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("feedbackservice_appointment_id_fkey");

                    b.HasOne("VisionCare.Infrastructure.Models.Staff", "RespondedByNavigation")
                        .WithMany("Feedbackservices")
                        .HasForeignKey("RespondedBy")
                        .HasConstraintName("feedbackservice_responded_by_fkey");

                    b.Navigation("Appointment");

                    b.Navigation("RespondedByNavigation");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Followup", b =>
                {
                    b.HasOne("VisionCare.Infrastructure.Models.Appointment", "Appointment")
                        .WithMany("Followups")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("followup_appointment_id_fkey");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Imagesservice", b =>
                {
                    b.HasOne("VisionCare.Infrastructure.Models.Service", "Service")
                        .WithOne("Imagesservice")
                        .HasForeignKey("VisionCare.Infrastructure.Models.Imagesservice", "ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("imagesservice_service_id_fkey");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Medicalhistory", b =>
                {
                    b.HasOne("VisionCare.Infrastructure.Models.Appointment", "Appointment")
                        .WithMany("Medicalhistories")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("medicalhistory_appointment_id_fkey");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Otpservice", b =>
                {
                    b.HasOne("VisionCare.Infrastructure.Models.Account", "Account")
                        .WithMany("Otpservices")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("otpservices_account_id_fkey");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Permissionrole", b =>
                {
                    b.HasOne("VisionCare.Infrastructure.Models.Permission", "Permission")
                        .WithMany("Permissionroles")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("permissionrole_permission_id_fkey");

                    b.HasOne("VisionCare.Infrastructure.Models.Role", "Role")
                        .WithMany("Permissionroles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("permissionrole_role_id_fkey");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Refreshtoken", b =>
                {
                    b.HasOne("VisionCare.Infrastructure.Models.Account", "Account")
                        .WithMany("Refreshtokens")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("refreshtokens_account_id_fkey");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Schedule", b =>
                {
                    b.HasOne("VisionCare.Infrastructure.Models.Doctor", "Doctor")
                        .WithMany("Schedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("schedules_doctor_id_fkey");

                    b.HasOne("VisionCare.Infrastructure.Models.Slot", "Slot")
                        .WithMany("Schedules")
                        .HasForeignKey("SlotId")
                        .IsRequired()
                        .HasConstraintName("schedules_slot_id_fkey");

                    b.Navigation("Doctor");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Service", b =>
                {
                    b.HasOne("VisionCare.Infrastructure.Models.Specialization", "Specialization")
                        .WithMany("Services")
                        .HasForeignKey("SpecializationId")
                        .HasConstraintName("services_specialization_id_fkey");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Servicesdetail", b =>
                {
                    b.HasOne("VisionCare.Infrastructure.Models.Service", "Service")
                        .WithMany("Servicesdetails")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("servicesdetail_service_id_fkey");

                    b.HasOne("VisionCare.Infrastructure.Models.Servicestype", "ServiceType")
                        .WithMany("Servicesdetails")
                        .HasForeignKey("ServiceTypeId")
                        .IsRequired()
                        .HasConstraintName("servicesdetail_service_type_id_fkey");

                    b.Navigation("Service");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Slot", b =>
                {
                    b.HasOne("VisionCare.Infrastructure.Models.Servicestype", "ServiceType")
                        .WithMany("Slots")
                        .HasForeignKey("ServiceTypeId")
                        .IsRequired()
                        .HasConstraintName("slots_service_type_id_fkey");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Staff", b =>
                {
                    b.HasOne("VisionCare.Infrastructure.Models.Account", "Account")
                        .WithOne("Staff")
                        .HasForeignKey("VisionCare.Infrastructure.Models.Staff", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("staff_account_id_fkey");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Account", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Auditlogs");

                    b.Navigation("Blogs");

                    b.Navigation("Claims");

                    b.Navigation("Commentblogs");

                    b.Navigation("Customer");

                    b.Navigation("Doctor");

                    b.Navigation("Otpservices");

                    b.Navigation("Refreshtokens");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Appointment", b =>
                {
                    b.Navigation("Checkouts");

                    b.Navigation("Feedbackdoctors");

                    b.Navigation("Feedbackservices");

                    b.Navigation("Followups");

                    b.Navigation("Medicalhistories");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Blog", b =>
                {
                    b.Navigation("Commentblogs");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Certificate", b =>
                {
                    b.Navigation("Certificatedoctors");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Commentblog", b =>
                {
                    b.Navigation("InverseParentComment");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Customer", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Customerrank", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Discounts");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Degree", b =>
                {
                    b.Navigation("Degreedoctors");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Discount", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Certificatedoctors");

                    b.Navigation("Degreedoctors");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Permission", b =>
                {
                    b.Navigation("Permissionroles");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Role", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Permissionroles");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Service", b =>
                {
                    b.Navigation("Imagesservice");

                    b.Navigation("Servicesdetails");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Servicesdetail", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Servicestype", b =>
                {
                    b.Navigation("Servicesdetails");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Slot", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Specialization", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("VisionCare.Infrastructure.Models.Staff", b =>
                {
                    b.Navigation("Feedbackdoctors");

                    b.Navigation("Feedbackservices");
                });
#pragma warning restore 612, 618
        }
    }
}
